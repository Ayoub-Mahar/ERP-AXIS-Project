//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERP.APP_CODE
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ERPDBEntities : DbContext
    {
        public ERPDBEntities()
            : base("name=ERPDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<BANK_NAME> BANK_NAME { get; set; }
        public virtual DbSet<BRANCH> BRANCHes { get; set; }
        public virtual DbSet<CHEQUE_BOOK_MST> CHEQUE_BOOK_MST { get; set; }
        public virtual DbSet<COMPANY> COMPANies { get; set; }
        public virtual DbSet<LEVEL1> LEVEL1 { get; set; }
        public virtual DbSet<LEVEL2> LEVEL2 { get; set; }
        public virtual DbSet<LEVEL3> LEVEL3 { get; set; }
        public virtual DbSet<LOCATION> LOCATIONs { get; set; }
        public virtual DbSet<ACCOUNT_PAYEE_MST> ACCOUNT_PAYEE_MST { get; set; }
        public virtual DbSet<CHEQUE_BOOK_DET> CHEQUE_BOOK_DET { get; set; }
        public virtual DbSet<FISCAL_YEAR> FISCAL_YEAR { get; set; }
        public virtual DbSet<LEVEL4> LEVEL4 { get; set; }
        public virtual DbSet<PAYMENT_MST> PAYMENT_MST { get; set; }
        public virtual DbSet<V_TYPE> V_TYPE { get; set; }
    
        [DbFunction("ERPDBEntities", "GetCHILD")]
        public virtual IQueryable<GetCHILD_Result> GetCHILD(Nullable<int> parentid, Nullable<int> lEVELOFCOA)
        {
            var parentidParameter = parentid.HasValue ?
                new ObjectParameter("parentid", parentid) :
                new ObjectParameter("parentid", typeof(int));
    
            var lEVELOFCOAParameter = lEVELOFCOA.HasValue ?
                new ObjectParameter("LEVELOFCOA", lEVELOFCOA) :
                new ObjectParameter("LEVELOFCOA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCHILD_Result>("[ERPDBEntities].[GetCHILD](@parentid, @LEVELOFCOA)", parentidParameter, lEVELOFCOAParameter);
        }
    
        public virtual int AccountPaymentByCheque_MST_SP(Nullable<int> iD, string uSER_ID, Nullable<int> cOM_CODE, string pRIN_CODE, Nullable<int> lOC_CODE, Nullable<int> fISCAL_YEAR_ID, Nullable<int> v_TYPE, Nullable<int> vOUCHER_NO, Nullable<System.DateTime> v_DATE, string cHEQUE_NO, Nullable<System.DateTime> cHEQUE_DATE, Nullable<decimal> aMOUNT, Nullable<bool> uSED, string remarks, Nullable<bool> rECONCILE, Nullable<bool> pOST_FLAG, Nullable<int> sUPPLIER_CODE, Nullable<decimal> gROSS_AMOUNT, Nullable<decimal> tOTAL_TAX, string pAYMENT_TYPE, string aDV_NO_PO_NO, Nullable<int> cUST_CODE, string aCC_PAYABLE, Nullable<bool> cANCEL_FLAG, Nullable<byte> type)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var uSER_IDParameter = uSER_ID != null ?
                new ObjectParameter("USER_ID", uSER_ID) :
                new ObjectParameter("USER_ID", typeof(string));
    
            var cOM_CODEParameter = cOM_CODE.HasValue ?
                new ObjectParameter("COM_CODE", cOM_CODE) :
                new ObjectParameter("COM_CODE", typeof(int));
    
            var pRIN_CODEParameter = pRIN_CODE != null ?
                new ObjectParameter("PRIN_CODE", pRIN_CODE) :
                new ObjectParameter("PRIN_CODE", typeof(string));
    
            var lOC_CODEParameter = lOC_CODE.HasValue ?
                new ObjectParameter("LOC_CODE", lOC_CODE) :
                new ObjectParameter("LOC_CODE", typeof(int));
    
            var fISCAL_YEAR_IDParameter = fISCAL_YEAR_ID.HasValue ?
                new ObjectParameter("FISCAL_YEAR_ID", fISCAL_YEAR_ID) :
                new ObjectParameter("FISCAL_YEAR_ID", typeof(int));
    
            var v_TYPEParameter = v_TYPE.HasValue ?
                new ObjectParameter("V_TYPE", v_TYPE) :
                new ObjectParameter("V_TYPE", typeof(int));
    
            var vOUCHER_NOParameter = vOUCHER_NO.HasValue ?
                new ObjectParameter("VOUCHER_NO", vOUCHER_NO) :
                new ObjectParameter("VOUCHER_NO", typeof(int));
    
            var v_DATEParameter = v_DATE.HasValue ?
                new ObjectParameter("V_DATE", v_DATE) :
                new ObjectParameter("V_DATE", typeof(System.DateTime));
    
            var cHEQUE_NOParameter = cHEQUE_NO != null ?
                new ObjectParameter("CHEQUE_NO", cHEQUE_NO) :
                new ObjectParameter("CHEQUE_NO", typeof(string));
    
            var cHEQUE_DATEParameter = cHEQUE_DATE.HasValue ?
                new ObjectParameter("CHEQUE_DATE", cHEQUE_DATE) :
                new ObjectParameter("CHEQUE_DATE", typeof(System.DateTime));
    
            var aMOUNTParameter = aMOUNT.HasValue ?
                new ObjectParameter("AMOUNT", aMOUNT) :
                new ObjectParameter("AMOUNT", typeof(decimal));
    
            var uSEDParameter = uSED.HasValue ?
                new ObjectParameter("USED", uSED) :
                new ObjectParameter("USED", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var rECONCILEParameter = rECONCILE.HasValue ?
                new ObjectParameter("RECONCILE", rECONCILE) :
                new ObjectParameter("RECONCILE", typeof(bool));
    
            var pOST_FLAGParameter = pOST_FLAG.HasValue ?
                new ObjectParameter("POST_FLAG", pOST_FLAG) :
                new ObjectParameter("POST_FLAG", typeof(bool));
    
            var sUPPLIER_CODEParameter = sUPPLIER_CODE.HasValue ?
                new ObjectParameter("SUPPLIER_CODE", sUPPLIER_CODE) :
                new ObjectParameter("SUPPLIER_CODE", typeof(int));
    
            var gROSS_AMOUNTParameter = gROSS_AMOUNT.HasValue ?
                new ObjectParameter("GROSS_AMOUNT", gROSS_AMOUNT) :
                new ObjectParameter("GROSS_AMOUNT", typeof(decimal));
    
            var tOTAL_TAXParameter = tOTAL_TAX.HasValue ?
                new ObjectParameter("TOTAL_TAX", tOTAL_TAX) :
                new ObjectParameter("TOTAL_TAX", typeof(decimal));
    
            var pAYMENT_TYPEParameter = pAYMENT_TYPE != null ?
                new ObjectParameter("PAYMENT_TYPE", pAYMENT_TYPE) :
                new ObjectParameter("PAYMENT_TYPE", typeof(string));
    
            var aDV_NO_PO_NOParameter = aDV_NO_PO_NO != null ?
                new ObjectParameter("ADV_NO_PO_NO", aDV_NO_PO_NO) :
                new ObjectParameter("ADV_NO_PO_NO", typeof(string));
    
            var cUST_CODEParameter = cUST_CODE.HasValue ?
                new ObjectParameter("CUST_CODE", cUST_CODE) :
                new ObjectParameter("CUST_CODE", typeof(int));
    
            var aCC_PAYABLEParameter = aCC_PAYABLE != null ?
                new ObjectParameter("ACC_PAYABLE", aCC_PAYABLE) :
                new ObjectParameter("ACC_PAYABLE", typeof(string));
    
            var cANCEL_FLAGParameter = cANCEL_FLAG.HasValue ?
                new ObjectParameter("CANCEL_FLAG", cANCEL_FLAG) :
                new ObjectParameter("CANCEL_FLAG", typeof(bool));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AccountPaymentByCheque_MST_SP", iDParameter, uSER_IDParameter, cOM_CODEParameter, pRIN_CODEParameter, lOC_CODEParameter, fISCAL_YEAR_IDParameter, v_TYPEParameter, vOUCHER_NOParameter, v_DATEParameter, cHEQUE_NOParameter, cHEQUE_DATEParameter, aMOUNTParameter, uSEDParameter, remarksParameter, rECONCILEParameter, pOST_FLAGParameter, sUPPLIER_CODEParameter, gROSS_AMOUNTParameter, tOTAL_TAXParameter, pAYMENT_TYPEParameter, aDV_NO_PO_NOParameter, cUST_CODEParameter, aCC_PAYABLEParameter, cANCEL_FLAGParameter, typeParameter);
        }
    
        public virtual ObjectResult<Bank_MST_SP_Result> Bank_MST_SP(Nullable<int> bANK_CODE, Nullable<int> b_CODE, string aCCOUNT_NO, string bRANCH_NAME, string aDDRESS1, string aDDRESS2, string tELEPHONE1, string tELEPHONE2, string e_MAIL, string fAX, string cONTACT_PERSON, string gL_CODE, Nullable<bool> sHOW_ON_INVOICE, string aCCOUNT_TITLE, Nullable<byte> type)
        {
            var bANK_CODEParameter = bANK_CODE.HasValue ?
                new ObjectParameter("BANK_CODE", bANK_CODE) :
                new ObjectParameter("BANK_CODE", typeof(int));
    
            var b_CODEParameter = b_CODE.HasValue ?
                new ObjectParameter("B_CODE", b_CODE) :
                new ObjectParameter("B_CODE", typeof(int));
    
            var aCCOUNT_NOParameter = aCCOUNT_NO != null ?
                new ObjectParameter("ACCOUNT_NO", aCCOUNT_NO) :
                new ObjectParameter("ACCOUNT_NO", typeof(string));
    
            var bRANCH_NAMEParameter = bRANCH_NAME != null ?
                new ObjectParameter("BRANCH_NAME", bRANCH_NAME) :
                new ObjectParameter("BRANCH_NAME", typeof(string));
    
            var aDDRESS1Parameter = aDDRESS1 != null ?
                new ObjectParameter("ADDRESS1", aDDRESS1) :
                new ObjectParameter("ADDRESS1", typeof(string));
    
            var aDDRESS2Parameter = aDDRESS2 != null ?
                new ObjectParameter("ADDRESS2", aDDRESS2) :
                new ObjectParameter("ADDRESS2", typeof(string));
    
            var tELEPHONE1Parameter = tELEPHONE1 != null ?
                new ObjectParameter("TELEPHONE1", tELEPHONE1) :
                new ObjectParameter("TELEPHONE1", typeof(string));
    
            var tELEPHONE2Parameter = tELEPHONE2 != null ?
                new ObjectParameter("TELEPHONE2", tELEPHONE2) :
                new ObjectParameter("TELEPHONE2", typeof(string));
    
            var e_MAILParameter = e_MAIL != null ?
                new ObjectParameter("E_MAIL", e_MAIL) :
                new ObjectParameter("E_MAIL", typeof(string));
    
            var fAXParameter = fAX != null ?
                new ObjectParameter("FAX", fAX) :
                new ObjectParameter("FAX", typeof(string));
    
            var cONTACT_PERSONParameter = cONTACT_PERSON != null ?
                new ObjectParameter("CONTACT_PERSON", cONTACT_PERSON) :
                new ObjectParameter("CONTACT_PERSON", typeof(string));
    
            var gL_CODEParameter = gL_CODE != null ?
                new ObjectParameter("GL_CODE", gL_CODE) :
                new ObjectParameter("GL_CODE", typeof(string));
    
            var sHOW_ON_INVOICEParameter = sHOW_ON_INVOICE.HasValue ?
                new ObjectParameter("SHOW_ON_INVOICE", sHOW_ON_INVOICE) :
                new ObjectParameter("SHOW_ON_INVOICE", typeof(bool));
    
            var aCCOUNT_TITLEParameter = aCCOUNT_TITLE != null ?
                new ObjectParameter("ACCOUNT_TITLE", aCCOUNT_TITLE) :
                new ObjectParameter("ACCOUNT_TITLE", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Bank_MST_SP_Result>("Bank_MST_SP", bANK_CODEParameter, b_CODEParameter, aCCOUNT_NOParameter, bRANCH_NAMEParameter, aDDRESS1Parameter, aDDRESS2Parameter, tELEPHONE1Parameter, tELEPHONE2Parameter, e_MAILParameter, fAXParameter, cONTACT_PERSONParameter, gL_CODEParameter, sHOW_ON_INVOICEParameter, aCCOUNT_TITLEParameter, typeParameter);
        }
    
        public virtual ObjectResult<Bank_SP_Result> Bank_SP(Nullable<int> id, string name, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Bank_SP_Result>("Bank_SP", idParameter, nameParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Branch_SP_Result> Branch_SP(Nullable<int> id, string name, Nullable<int> companyID, Nullable<int> locationId, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Branch_SP_Result>("Branch_SP", idParameter, nameParameter, companyIDParameter, locationIdParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<CHEQUEBOOKMST_SP_Result> CHEQUEBOOKMST_SP(string gL_CODE, Nullable<int> cHQ_BOOK_NO, string pREFIX_LEAF, Nullable<int> nO_OF_LEAF, Nullable<int> sTART_DIGIT, Nullable<bool> cHEQUE_BOOK_ACTIVE, string entryBy, Nullable<byte> type)
        {
            var gL_CODEParameter = gL_CODE != null ?
                new ObjectParameter("GL_CODE", gL_CODE) :
                new ObjectParameter("GL_CODE", typeof(string));
    
            var cHQ_BOOK_NOParameter = cHQ_BOOK_NO.HasValue ?
                new ObjectParameter("CHQ_BOOK_NO", cHQ_BOOK_NO) :
                new ObjectParameter("CHQ_BOOK_NO", typeof(int));
    
            var pREFIX_LEAFParameter = pREFIX_LEAF != null ?
                new ObjectParameter("PREFIX_LEAF", pREFIX_LEAF) :
                new ObjectParameter("PREFIX_LEAF", typeof(string));
    
            var nO_OF_LEAFParameter = nO_OF_LEAF.HasValue ?
                new ObjectParameter("NO_OF_LEAF", nO_OF_LEAF) :
                new ObjectParameter("NO_OF_LEAF", typeof(int));
    
            var sTART_DIGITParameter = sTART_DIGIT.HasValue ?
                new ObjectParameter("START_DIGIT", sTART_DIGIT) :
                new ObjectParameter("START_DIGIT", typeof(int));
    
            var cHEQUE_BOOK_ACTIVEParameter = cHEQUE_BOOK_ACTIVE.HasValue ?
                new ObjectParameter("CHEQUE_BOOK_ACTIVE", cHEQUE_BOOK_ACTIVE) :
                new ObjectParameter("CHEQUE_BOOK_ACTIVE", typeof(bool));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CHEQUEBOOKMST_SP_Result>("CHEQUEBOOKMST_SP", gL_CODEParameter, cHQ_BOOK_NOParameter, pREFIX_LEAFParameter, nO_OF_LEAFParameter, sTART_DIGITParameter, cHEQUE_BOOK_ACTIVEParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Company_SP_Result> Company_SP(Nullable<int> id, string name, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_SP_Result>("Company_SP", idParameter, nameParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<FiscalYear_SP_Result> FiscalYear_SP(Nullable<int> id, Nullable<System.DateTime> dATE_FROM, Nullable<System.DateTime> dATE_TO, Nullable<bool> active, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var dATE_FROMParameter = dATE_FROM.HasValue ?
                new ObjectParameter("DATE_FROM", dATE_FROM) :
                new ObjectParameter("DATE_FROM", typeof(System.DateTime));
    
            var dATE_TOParameter = dATE_TO.HasValue ?
                new ObjectParameter("DATE_TO", dATE_TO) :
                new ObjectParameter("DATE_TO", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FiscalYear_SP_Result>("FiscalYear_SP", idParameter, dATE_FROMParameter, dATE_TOParameter, activeParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Level1_SP_Result> Level1_SP(Nullable<int> id, string desc, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Level1_SP_Result>("Level1_SP", idParameter, descParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Level2_SP_Result> Level2_SP(Nullable<int> id, string desc, string level1ID, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var level1IDParameter = level1ID != null ?
                new ObjectParameter("Level1ID", level1ID) :
                new ObjectParameter("Level1ID", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Level2_SP_Result>("Level2_SP", idParameter, descParameter, level1IDParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Level3_SP_Result> Level3_SP(Nullable<int> id, string desc, string level1ID, string level2ID, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var level1IDParameter = level1ID != null ?
                new ObjectParameter("Level1ID", level1ID) :
                new ObjectParameter("Level1ID", typeof(string));
    
            var level2IDParameter = level2ID != null ?
                new ObjectParameter("Level2ID", level2ID) :
                new ObjectParameter("Level2ID", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Level3_SP_Result>("Level3_SP", idParameter, descParameter, level1IDParameter, level2IDParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Level4_SP_Result> Level4_SP(Nullable<int> id, string desc, string level1ID, string level2ID, string level3ID, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var level1IDParameter = level1ID != null ?
                new ObjectParameter("Level1ID", level1ID) :
                new ObjectParameter("Level1ID", typeof(string));
    
            var level2IDParameter = level2ID != null ?
                new ObjectParameter("Level2ID", level2ID) :
                new ObjectParameter("Level2ID", typeof(string));
    
            var level3IDParameter = level3ID != null ?
                new ObjectParameter("Level3ID", level3ID) :
                new ObjectParameter("Level3ID", typeof(string));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Level4_SP_Result>("Level4_SP", idParameter, descParameter, level1IDParameter, level2IDParameter, level3IDParameter, entryByParameter, typeParameter);
        }
    
        public virtual ObjectResult<Location_SP_Result> Location_SP(Nullable<int> id, string name, Nullable<int> region, string entryBy, Nullable<byte> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(int));
    
            var entryByParameter = entryBy != null ?
                new ObjectParameter("EntryBy", entryBy) :
                new ObjectParameter("EntryBy", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location_SP_Result>("Location_SP", idParameter, nameParameter, regionParameter, entryByParameter, typeParameter);
        }
    }
}
